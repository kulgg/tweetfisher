import ProgressBar from "@ramonak/react-progress-bar";
import { useQuery } from "@tanstack/react-query";
import { setMaxIdleHTTPParsers } from "http";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import React, { useEffect, useState } from "react";
import DeletedTweets from "../components/deleted-tweets";
import LoadingAnimation from "../components/loading-animation";
import LoadingMessage from "../components/loading-message";
import Tweet from "../components/tweet";
import isDeleted from "../utils/twitter";

function delay(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

type DeletedTweet = {
  date: string;
  url: string;
};

type FullDeletedTweet = {
  tweet: string;
  username: string;
  date: string;
  pfp: string;
};

const Home: NextPage = () => {
  const [step, setStep] = useState<1 | 2 | 3 | 4>(1);
  const [usernameInput, setUsernameInput] = useState("");
  const [username, setUsername] = useState("");
  const [deletedTweets, setDeletedTweets] = useState<DeletedTweet[]>([]);
  const [numFetched, setNumFetched] = useState(0);
  const [fullDeletedTweet, setFullDeletedTweet] = useState<FullDeletedTweet[]>(
    []
  );

  const archiveQuery = useQuery({
    queryKey: ["webarchive"],
    queryFn: async () => {
      const response = await fetch(`/api/archive/tweets/${usernameInput}`);
      const result = await response.json();
      return result;
    },
    enabled: false,
  });

  const isStepTwo = useEffect(() => {
    if (!archiveQuery.data || archiveQuery.data === undefined || step > 2) {
      return;
    }

    setStep(2);
  }, [archiveQuery.data]);

  console.log(usernameInput);
  console.log("data", archiveQuery.data);
  console.log("deleted", deletedTweets);
  console.log("fullDeleted", fullDeletedTweet);

  const reset = () => {
    setUsernameInput("");
    setDeletedTweets([]);
    setFullDeletedTweet([]);
    setNumFetched(0);
    setStep(1);
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log("submitted");
    setUsername(usernameInput);
    archiveQuery.refetch();
    reset();
  };

  useEffect(() => {
    switch (step) {
      case 2:
        setStep(3);
        if (archiveQuery.data.length === 0) {
          setStep(4);
        }
        for (let i = 0; i < archiveQuery.data.length; i++) {
          delay(1000).then(() => {
            isDeleted(archiveQuery.data[i].url).then((x) => {
              if (x) {
                setDeletedTweets((prev) => [...prev, archiveQuery.data[i]]);
              }
              setNumFetched((prev) => prev + 1);
              if (i === archiveQuery.data.length - 1) {
                setStep(4);
              }
            });
          });
        }
        break;
      case 3:
        break;
      case 4:
        for (let i = 0; i < deletedTweets.length; i++) {
          const result = fetch(
            `/api/archive/tweet/${deletedTweets[i]!.date}/${encodeURIComponent(
              deletedTweets[i]!.url
            )}`
          )
            .then((x) => x.json())
            .then((x) => {
              if (x !== "Server error") {
                setFullDeletedTweet((prev) => [...prev, x]);
              }
            });
        }
        break;
    }
  }, [step]);

  return (
    <>
      <Head>
        <title>DeletedTweets</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen overflow-hidden ">
        <div className="container mx-auto flex flex-col items-center">
          <h1 className="mr-auto mt-2 bg-gradient-to-r from-emerald-200 to-rose-200 bg-clip-text text-[39px] font-bold text-transparent sm:mt-20 sm:text-7xl">
            Find Deleted Tweets
          </h1>
          <div className="mt-10 w-full sm:mt-20">
            <form onSubmit={handleSubmit} className="relative">
              <label
                htmlFor="search"
                className="block text-lg font-medium text-indigo-200"
              >
                Enter a username
              </label>
              <input
                type="text"
                name="search"
                autoComplete="off"
                id="search"
                placeholder="elonmusk"
                className="mt-1 block h-12 w-full rounded-md border-gray-500 bg-neutral-900 text-lg text-gray-100 shadow-sm placeholder:text-gray-500 focus:border-[1px] focus:border-gray-300 focus:ring-1 focus:ring-emerald-700"
                value={usernameInput}
                onChange={(e) => setUsernameInput(e.currentTarget.value)}
              />
            </form>
          </div>
          <div className="mt-6"></div>
          {username && (
            <div className="mb-3 mr-auto rounded-lg bg-gray-800 py-1 px-2 text-lg text-zinc-300">
              @{username}
            </div>
          )}
          {archiveQuery.isFetching && (
            <LoadingMessage message="Searching for archived tweets" />
          )}
          {step >= 2 && (
            <div className="">
              <div className="grid grid-cols-3 gap-2 text-lg">
                <span className="text-right font-semibold text-emerald-200">
                  {archiveQuery.data.length}
                </span>
                <div className="col-span-2">archived tweets.</div>
              </div>
              <div className="">
                <div className="grid grid-cols-3 gap-2 text-lg">
                  <span className="text-right font-semibold text-rose-200">
                    {deletedTweets.length}
                  </span>
                  <div className="col-span-2">deleted tweets.</div>
                </div>
              </div>
            </div>
          )}
          {step === 3 && (
            <div className="my-7">
              <LoadingMessage message="Checking for deleted tweets" />
              <div className="my-2"></div>
              <ProgressBar
                completed={numFetched}
                maxCompleted={archiveQuery.data.length}
                className="w-full rounded-full border border-gray-400"
                bgColor="#a7f3d0"
                baseBgColor="#374151"
                isLabelVisible={false}
              />
            </div>
          )}
          {step === 4 &&
            fullDeletedTweet.map((x) => {
              return (
                <Tweet
                  key={x.tweet}
                  text={x.tweet}
                  username={x.username}
                  created={x.date}
                  pfp={x.pfp.replace("_bigger", "_400x400")}
                  url="#"
                  handle="blah"
                />
              );
            })}
        </div>
      </main>
    </>
  );
};

export default Home;
