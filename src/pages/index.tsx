import ProgressBar from "@ramonak/react-progress-bar";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { type NextPage } from "next";
import Head from "next/head";
import pLimit from "p-limit";
import React, { useEffect, useState } from "react";
import DeletedTweets from "../components/deleted-tweets";
import LoadingMessage from "../components/loading-message";
import fetchTweetStatus from "../utils/fetch";
import LoadingTweetsOverlay from "../components/loading-tweets-overlay";

type DeletedTweet = {
  archiveDate: string;
  url: string;
};

export type FullDeletedTweet = {
  tweet: string;
  username: string;
  date: string;
  pfp: string;
  url: string;
  handle: string;
};

const maxConcurrentTwitterRequests = 5;
const maxConcurrentArchiveRequests = 5;
const twitterLimit = pLimit(maxConcurrentTwitterRequests);
const archiveLimit = pLimit(maxConcurrentArchiveRequests);

const Home: NextPage = () => {
  const [step, setStep] = useState<1 | 2 | 3 | 4>(1);
  const [usernameInput, setUsernameInput] = useState("");
  const [username, setUsername] = useState("");
  const [deletedTweets, setDeletedTweets] = useState<DeletedTweet[]>([]);
  const [numFetched, setNumFetched] = useState(0);
  const [numMissed, setNumMissed] = useState(0);
  const [fullDeletedTweet, setFullDeletedTweet] = useState<FullDeletedTweet[]>(
    []
  );
  const [fetchedUrls, setFetchedUrls] = useState<string[]>([]);
  const archiveQuery = useQuery({
    queryKey: ["webarchive"],
    queryFn: async () => {
      const response = await fetch(`/api/archive/tweets/${usernameInput}`);
      const result = await response.json();
      return result;
    },
    enabled: false,
    onSuccess: (data) => {
      setStep(2);
      for (let i = 0; i < data.length; i++) {
        twitterLimit(() =>
          fetchTweetStatus(data[i].url).then((x) => {
            if (x === 404) {
              setDeletedTweets((prev) => [...prev, data[i]]);
            }

            if (x == 429) {
              setNumMissed((prev) => prev + 1);
            } else {
              setNumFetched((prev) => prev + 1);
            }
          })
        );
      }
    },
  });

  console.log(usernameInput);
  console.log("data", archiveQuery.data);
  console.log("deleted", deletedTweets);
  console.log("fullDeleted", fullDeletedTweet);
  console.log("step", step);

  const reset = () => {
    setUsernameInput("");
    setStep(1);
    setDeletedTweets([]);
    setFullDeletedTweet([]);
    setNumFetched(0);
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log("submitted");
    setUsername(usernameInput);
    reset();
    archiveQuery.refetch();
  };

  useEffect(() => {
    for (let i = 0; i < deletedTweets.length; i++) {
      if (fetchedUrls.find((x) => x === deletedTweets[i]!.url)) {
        console.log("Skipping", deletedTweets[i]!.url);
        continue;
      }
      console.log("Fetching", deletedTweets[i]!.url);
      setFetchedUrls((prev) => [...prev, deletedTweets[i]!.url]);
      archiveLimit(() =>
        fetch(
          `/api/archive/tweet/${
            deletedTweets[i]!.archiveDate
          }/${encodeURIComponent(deletedTweets[i]!.url)}`
        )
          .then((x) => x.json())
          .then((x) => {
            if (x !== "Server error") {
              setFullDeletedTweet((prev) => [
                ...prev,
                {
                  ...x,
                  url: `https://web.archive.org/web/${
                    deletedTweets[i]!.archiveDate
                  }/${deletedTweets[i]!.url}`,
                  handle: username,
                },
              ]);
            }
          })
      );
    }
  }, [deletedTweets]);

  if (
    step !== 3 &&
    step !== 4 &&
    archiveQuery.data &&
    numFetched + numMissed === archiveQuery.data.length
  ) {
    setStep(3);
  }
  if (
    step !== 4 &&
    archiveQuery.data &&
    numFetched + numMissed === archiveQuery.data.length &&
    fullDeletedTweet.length === deletedTweets.length
  ) {
    setStep(4);
  }

  return (
    <>
      <Head>
        <title>DeletedTweets</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen overflow-x-hidden">
        <div className="container mx-auto flex flex-col items-center">
          <h1 className="mr-auto mt-2 bg-gradient-to-r from-emerald-200 to-rose-200 bg-clip-text text-[39px] font-bold text-transparent sm:mt-20 sm:text-7xl">
            Find Deleted Tweets
          </h1>
          <div className="mt-10 w-full sm:mt-20">
            <form onSubmit={handleSubmit} className="relative">
              <label
                htmlFor="search"
                className="block text-lg font-medium text-indigo-200"
              >
                Enter a username
              </label>
              <input
                type="text"
                name="search"
                autoComplete="off"
                id="search"
                placeholder="elonmusk"
                className="mt-1 block h-12 w-full rounded-md border-gray-500 bg-neutral-900 text-lg text-gray-100 shadow-sm placeholder:text-gray-500 focus:border-[1px] focus:border-gray-300 focus:ring-1 focus:ring-emerald-700"
                value={usernameInput}
                onChange={(e) => setUsernameInput(e.currentTarget.value)}
              />
            </form>
          </div>
          <div className="mt-6"></div>
          {username && (
            <div className="mb-3 mr-auto rounded-lg bg-gray-800 py-1 px-2 text-lg text-zinc-300">
              @{username}
            </div>
          )}
          {archiveQuery.isFetching && (
            <LoadingMessage message="Searching for archived tweets" />
          )}
          {step >= 2 && (
            <div className="">
              <div className="grid grid-cols-3 gap-2 text-lg">
                <span className="text-right font-semibold text-emerald-200">
                  {archiveQuery.data.length}
                </span>
                <div className="col-span-2">archived tweets.</div>
              </div>
              <div className="">
                <div className="grid grid-cols-3 gap-2 text-lg">
                  <span className="text-right font-semibold text-rose-200">
                    {deletedTweets.length}
                  </span>
                  <div className="col-span-2">deleted tweets.</div>
                </div>
              </div>
              {numMissed > 0 && (
                <div className="">
                  <div className="grid grid-cols-3 gap-2 text-lg">
                    <span className="text-right font-semibold text-gray-200">
                      {numMissed}
                    </span>
                    <div className="col-span-2">missed tweets.</div>
                  </div>
                </div>
              )}
            </div>
          )}
          {step === 2 && (
            <div className="my-7 w-full">
              <LoadingMessage message="Checking for deleted tweets" />
              <div className="my-2"></div>
              <ProgressBar
                completed={numFetched}
                maxCompleted={archiveQuery.data?.length}
                className="w-full rounded-full border border-gray-400"
                bgColor="#a7f3d0"
                baseBgColor="#374151"
                isLabelVisible={false}
              />
            </div>
          )}
          {step >= 2 && <DeletedTweets tweets={fullDeletedTweet} />}
          {step >= 2 && step < 4 && (
            <LoadingTweetsOverlay
              numLoaded={fullDeletedTweet.length}
              total={deletedTweets.length}
            />
          )}
        </div>
      </main>
    </>
  );
};

export default Home;
